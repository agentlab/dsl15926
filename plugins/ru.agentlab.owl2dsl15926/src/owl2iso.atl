-- @path MM=/com.emf4sw.owl/model/owl2.ecore
-- @path MM1=/ru.agentlab.dsl15926/model/dsl15926.ecore


module owl2iso;
create OUT: MM1 from IN: MM;

uses owl2isoHelper;

helper context MM!ClassExpression def: isThing: Boolean =
	if self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Thing' then
		true
	else
		false
	endif;

--//////////////////////////////////////////////
--Classes
--/////////////////////////////////////////////

helper context MM!ClassExpression def: isAbstractObject: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#AbstractObject') then
		true
	else
		false
	endif;


helper context MM!ClassExpression def: isClass: Boolean =
	if self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Class' then
		true
	else
		if( self.subClassOf->collect().debug()) then
			true
		else 
			false
			endif
	endif;

helper context MM!ClassExpression def: isMultidimensionalObject: Boolean = 
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#MultidimensionalObject') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isPossibleIndividual: Boolean =
	if self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#PossibleIndividual' then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isRelationship: Boolean =
	if self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Relationship' then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: URI2label: String = 
	self.URI.toString().substring(self.URI.toString().indexOf('#')+2,self.URI.toString().size());
--********************************************
-- Rules
--********************************************
rule OWLThing2DslThing{
	from
		owl_thing:MM!ClassExpression (
			owl_thing.isThing
		)
	to
		dsl_classThing:MM1!Class(
			label <- owl_thing.URI2label	
		)
}

rule OWLPossibleIndividual2DslIndividual{
	from
		owl_possibleIndividual: MM!ClassExpression( 
			owl_possibleIndividual.isPossibleIndividual
		)
	to
		dsl_individualPossibleIndividual: MM1!Individual(
			label <- owl_possibleIndividual.URI2label
		)
}

rule OWLAbstractObject2DslClass{
	from
		owl_abstractObject: MM!ClassExpression( 
			owl_abstractObject.isAbstractObject
		)
	to
		dsl_classAbstractObject: MM1!Class(
			label <- owl_abstractObject.URI2label
			,subClassOf <- owl_abstractObject.subClassOf
		)
}

rule OWLMultidimensionalObject2DslTemplate{
	from 
		owl_multidimensionalObject: MM!ClassExpression(
			owl_multidimensionalObject.isMultidimensionalObject	
		)
	to
		dsl_templateMultidimensionalObject: MM1!Template(
			label <- owl_multidimensionalObject.URI2label
			,subClassOf <- owl_multidimensionalObject.subClassOf	
			--, disjointClassess <- owl_multidimensionalObject.disjointClasses
		)
}

rule OWLClass2DslClass{
	from 
		owl_class: MM!ClassExpression(
			owl_class.isClass 
		)
	to
		dsl_classClass: MM1!Class(
			label <- owl_class.URI2label
			,subClassOf <- owl_class.subClassOf
			--, disjointClassess <- owl_class.disjointClasses
			)
}

rule OWLRelationship2DslTemplate{
	from 
		owl_relationship: MM!ClassExpression(
			owl_relationship.isRelationship
		)
	to
		dsl_templateRelationship: MM1!Template(
			label <- owl_relationship.URI2label
			,subClassOf <- owl_relationship.subClassOf	
		)
}

