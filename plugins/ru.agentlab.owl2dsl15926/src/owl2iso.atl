-- @path MM=/com.emf4sw.owl/model/owl2.ecore
-- @path MM1=/ru.agentlab.dsl15926/model/dsl15926.ecore


module owl2iso;
create OUT: MM1 from IN: MM;

uses owl2isoHelper;

helper context MM!ClassExpression def: isThing: Boolean =
	if self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Thing' then
		true
	else
		false
	endif;

--//////////////////////////////////////////////
--Classes
--/////////////////////////////////////////////



helper context MM!ClassExpression def: isAbstractObject: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#AbstractObject') then
		true
	else
		false
endif;

helper context MM!ClassExpression def: isActivity: Boolean = 
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Activity') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isActualIndividual: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ActualIndividual') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isApproval: Boolean =
	if self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Approval' then
		true
	else
		false
	endif;


helper context MM!ClassExpression def: isArithmeticNumber: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ArithmeticNumber') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isArrangedIndividual: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ArrangedIndividual') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isArrangementOfIndividual: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ArrangementOfIndividual') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isAssemblyOfIndividual: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#AssemblyOfIndividual') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isBeginning: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Beginning') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isBoundaryOfNumberSpace: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#BoundaryOfNumberSpace') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isBoundaryOfPropertySpace: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#BoundaryOfPropertySpace') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isCardinality: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Cardinality') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isCauseOfEvent: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#CauseOfEvent') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClass: Boolean =
	if self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Class' then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfAbstractObject: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfAbstractObject') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfActivity: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfActivity') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfApproval: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfApproval') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfApprovalByStatus: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfApprovalByStatus') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfArrangedIndividual: Boolean =
	if (self.URI = ' http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfArrangedIndividual') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfArrangementOfIndividual: Boolean =
	if (self.URI = ' http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfArrangementOfIndividual') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfAssemblyOfIndividual: Boolean =
	if (self.URI = ' http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfAssemblyOfIndividual') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfAssertion: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfAssertion') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfAtom: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfAtom') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfBiologicalMatter: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfBiologicalMatter') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfCauseOfBeginningOfClassOfIndividual: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfCauseOfBeginningOfClassOfIndividual') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfCauseOfEndingOfClassOfIndividual: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfCauseOfEndingingOfClassOfIndividual') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfClass: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfClass') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfClassOfComposition: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfClassOfComposition') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfClassOfDefinition: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfClassOfDefinition') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfClassOfDescription: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfClassOfDescription') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfClassOfIdentification: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfClassOfIdentification') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfClassOfIndividual: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfClassOfIndividual') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfClassOfInformationRepresentation: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfClassOfInformationRepresentation') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfClassOfRelationship: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfClassOfRelationship') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfClassOfRelationshipWithSignature: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfClassOfRelationshipWithSignature') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfClassOfRepresentation: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfClassOfRepresentation') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfClassOfRepresentationTranslation: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfClassOfRepresentationTranslation') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfClassOfResponsibilityForRepresentation: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfClassOfResponsibilityForRepresentation') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfClassOfUsageOfRepresentation: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfClassOfUsageOfRepresentation') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfClassification: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfClassification') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfCompositeMaterial: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfCompositeMaterial') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfCompositionOfIndividual: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfCompositionOfIndividual') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfCompound: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfCompound') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfConnectionOfIndividual: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfConnectionOfIndividual') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfContainmentOfIndividual: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfContainmentOfIndividual') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfDefinition: Boolean =
	if (self.URI = ' http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfDefinition') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfDescription: Boolean =
	if (self.URI = ' http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfDescription') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfDimensionForShape: Boolean =
	if (self.URI = ' http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfDimensionForShape') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfDirectConnection: Boolean =
	if (self.URI = ' http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfDirectConnection') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfEvent: Boolean =
	if (self.URI = ' http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfEvent') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfExpressInformationRepresentation: Boolean =
	if (self.URI = ' http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfExpressInformationRepresentation') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfFeature: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfFeature') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfFeatureWholePart: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfFeatureWholePart') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfFunctionalMapping: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfFunctionalMapping') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfFunctionalObject: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfFunctionalObject') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfIdentification: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfIdentification') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfInanimatePhysicalObject: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfInanimatePhysicalObject') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfIndividual: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfIndividual') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfIndividualUsedInConnection: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfIndividualUsedInConnection') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfInformationObject: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfInformationObject') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfInformationPresentation: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfInformationPresentation') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfInformationRepresentation: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfInformationRepresentation') then
		true
	else
		false
	endif;


helper context MM!ClassExpression def: isClassOfLifecycleStage: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfLifecycleStage') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfMolecule: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfMolecule') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfMultidimensionalObject: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfMultidimensionalObject') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfNumber: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfNumber') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfOrganism: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfOrganism') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfOrganization: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfOrganization') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfParticulateMaterial: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfParticulateMaterial') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfPeriodInTime: Boolean =
	if (self.URI = ' http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfPeriodInTime') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfPerson: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfPerson') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfPointInTime: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfPointInTime') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfProperty: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfProperty') then
		true
	else
		false
	endif;
helper context MM!ClassExpression def: isClassOfPropertySpace: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfPropertySpace') then
		true
	else
		false
	endif;


helper context MM!ClassExpression def: isClassOfRelationship: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfRelationship') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfRelationshipWithRelatedEnd1: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfRelationshipWithRelatedEnd1') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfRelationshipWithRelatedEnd2: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfRelationshipWithRelatedEnd2') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfResponsibilityForRepresentation: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfResponsibilityForRepresentation') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfShape: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfShape') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfShapeDimension: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfShapeDimension') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfStatus: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfStatus') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfSubAtomicParticle: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfSubAtomicParticle') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isClassOfUsageOfRepresentation: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ClassOfUsageOfRepresentation') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isEnumeratedSetOfClass: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#EnumeratedSetOfClass') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isCrystallineStructure: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#CrystallineStructure') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isEvent: Boolean =
	if self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Event' then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isFunctionalPhysicalObject: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#FunctionalPhysicalObject') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isIndividualDimension: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#IndividualDimension') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isIntegerNumber: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#IntegerNumber') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isMaterializedPhysicalObject: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#MaterializedPhysicalObject') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isNumberSpace: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#NumberSpace') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isParticipatingRoleAndDomain: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ParticipatingRoleAndDomain') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isPeriodInTime: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#PeriodInTime') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isPhase: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Phase') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isPhysicalObject: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#PhysicalObject') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isPointInTime: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#PointInTime') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isPossibleIndividual: Boolean =
	if self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#PossibleIndividual' then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isProperty: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Property') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isPropertySpace: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#PropertySpace') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isRealNumber: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#RealNumber') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isRelationship: Boolean =
	if self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Relationship' then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isRepresentationOfGregorianDateAndUtcTime: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#RepresentationOfGregorianDateAndUtcTime') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isRole: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Role') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isRoleAndDomain: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#RoleAndDomain') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isShape: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Shape') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isShapeDimension: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#ShapeDimension') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isSpatialLocation: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#SpatialLocation') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isStatus: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Status') then
		true
	else
		false
	endif;

helper context MM!ClassExpression def: isStream: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#Stream') then
		true
	else
		false
	endif;


helper context MM!ClassExpression def: isWholeLifeIndividual: Boolean =
	if (self.URI = 'http://standards.iso.org/iso/ts/15926/-8/ed-1/tech/reference-data/data-model#WholeLifeIndividual') then
		true
	else
		false
	endif;

--********************************************
-- Rules
--********************************************

rule OWLThing2DslThing{
	from
		owl_thing:MM!ClassExpression (
			owl_thing.isThing
		)
	to
		dsl_thing:MM1!Class
}

rule OWLPossibleIndividual2DslIndividual{
	from
		owl_possibleIndividual: MM!ClassExpression( 
			owl_possibleIndividual.isPossibleIndividual
		)
	to
		dsl_IndividualPossibleIndividual: MM1!Individual
}

rule OWLAbstractObject2DslClass{
	from
		owl_abstractObject: MM!ClassExpression( 
			owl_abstractObject.isAbstractObject
		)
	to
		dsl_abstractObject: MM1!Class(
		subClassOf <- owl_abstractObject.subClassOf
		)
}

rule OWLActivity2DslIndividual{
 	from
		owl_activity: MM!ClassExpression(
			owl_activity.isActivity
		)
	to 
		dsl_individualActivity: MM1!Individual
}

rule OWLActualIndividual2DslIndividual{
 	from
		owl_actualIndividual: MM!ClassExpression(
			owl_actualIndividual.isActualIndividual
		)
	to
		dsl_individualActualIndividual: MM1!Individual
}

rule OWLApproval2DslTemplate{
 	from
		owl_approval: MM!ClassExpression(
			owl_approval.isApproval 
		)
	to
		dsl_roleApprover: MM1!TemplateRole(
			entityType <- dsl_roleApprover.isPossibleIndividual
		)
		, dsl_roleApproved: MM1!TemplateRole(
--			entityType <- dsl_roleApproved.isRelationship	
		)
		, dsl_templateApproval: MM1!Template(
		subClassOf <- owl_approval.subClassOf->select(e | e.oclIsTypeOf(MM!ClassExpression) and e.isRelationship)
--		 roles <- Sequence {dsl_roleApprover, dsl_roleApproved}
		)
		
}

rule OWLArithmeticNumber2DslClass{
 	from
		owl_arithmeticNumber: MM!ClassExpression(
			owl_arithmeticNumber.isArithmeticNumber
		)
	to 
		dsl_classArithmeticNumber: MM1!Class(
			subClassOf <- owl_arithmeticNumber.subClassOf
			, disjointClasses <- owl_arithmeticNumber.disjointClasses
		)
}

rule OWLArrangedIndividual2DslIndividual{
 	from
		owl_arrangedIndividual: MM!ClassExpression(
			owl_arrangedIndividual.isArrangedIndividual
		)
	to 
		dsl_individualArrangedIndividual: MM1!Individual
}

rule OWLCardinality2DslClass{
 	from
		owl_cardinality: MM!ClassExpression(
			owl_cardinality.isCardinality
		)
	to 
		dsl_classCardinality: MM1!Class(
			subClassOf <- owl_cardinality.subClassOf
		)
}

rule OwlClass2DslClass {
	from
		owl_class: MM!ClassExpression(
			owl_class.isClass
		)
	to
		dsl_class: MM1!Class 
}

rule OWLClassOfAbstractObject2DslClass{
 	from
		owl_classOfAbstractObject: MM!ClassExpression(
			owl_classOfAbstractObject.isClassOfAbstractObject 			
		)
	to 
		dsl_classClassOfAbstractObject: MM1!Class(
			subClassOf <- owl_classOfAbstractObject.subClassOf
			, disjointClasses <- owl_classOfAbstractObject.disjointClasses
		)
}

rule OWLClassOfArrangedIndividual2DslClass{
 	from
		owl_classOfArrangedIndividual: MM!ClassExpression(
			owl_classOfArrangedIndividual.isClassOfArrangedIndividual
		)
	to 
		dsl_classClassOfArrangedIndividual: MM1!Class(
			subClassOf <- owl_classOfArrangedIndividual.subClassOf
			, disjointClasses <- owl_classOfArrangedIndividual.disjointClasses
		)
}

rule OWLClassOfActivity2DslClass{
 	from
		owl_classOfActivity: MM!ClassExpression(
			owl_classOfActivity.isClassOfActivity
		)
	to 
		dsl_classClassOfActivity: MM1!Class(
			subClassOf <- owl_classOfActivity.subClassOf->select(e | e.oclIsTypeOf(MM!ClassExpression) and e.isClassOfArrangedIndividual)
		)
}

rule OWLClassOfAtom2DslClass{
	from 
		owl_classOfAtom: MM!ClassExpression(
			owl_classOfAtom.isClassOfAtom	
		)
	to 	
		dsl_classClassOfAtom: MM1!Class( 
			subClassOf <- owl_classOfAtom.subClassOf->select(e | e.oclIsTypeOf(MM!ClassExpression) and e.isClassOfArrangedIndividual)
			,disjointClasses <- owl_classOfAtom.disjointClasses->select(e | e.oclIsTypeOf(MM!ClassExpression) and e.isClassOfBiologicalMatter 
				and e.isClassOfCompositeMaterial and e.isClassOfCompound and e.isClassOfInformationPresentation 
				and e.isClassOfInformationRepresentation and e.isClassOfMolecule and e.isClassOfParticulateMaterial
				and e.isClassOfSubAtomicParticle and e.isPhase)
		)
}

rule OWLClassOfBiologicalMatter2DslClass{
	from
		owl_classOfBiologicalMatter: MM!ClassExpression(
			owl_classOfBiologicalMatter.isClassOfBiologicalMatter
		)
	to 	
		dsl_classClassOfBiologicalMatter: MM1!Class(
			subClassOf <- owl_classOfBiologicalMatter.subClassOf->select(e | e.oclIsTypeOf(MM!ClassExpression) and e.isClassOfArrangedIndividual)
			, disjointClasses <- owl_classOfBiologicalMatter.disjointClasses->select(e | e.oclIsTypeOf(MM!ClassExpression)
				and e.isClassOfCompositeMaterial and e.isClassOfCompound 
				and e.isClassOfInformationPresentation 	and e.isClassOfInformationRepresentation 
				and e.isClassOfMolecule and e.isClassOfParticulateMaterial
				and e.isClassOfSubAtomicParticle and e.isPhase)	
		)
}

rule OWLClassOfClass2DslClass{
 	from
		owl_classOfClass: MM!ClassExpression(
			owl_classOfClass.isClassOfClass
		)
	to 
		dsl_classClassOfClass: MM1!Class(
			subClassOf <- owl_classOfClass.subClassOf	
		)
}

rule OWLClassOfClassOfIndividual2DslClass{
 	from
		owl_classOfClassOfIndividual: MM!ClassExpression(
			owl_classOfClassOfIndividual.isClassOfClassOfIndividual
		)
	to 
		dsl_classClassOfClassOfIndividual: MM1!Class(
			subClassOf <- owl_classOfClassOfIndividual.subClassOf
			, disjointClasses <- owl_classOfClassOfIndividual.disjointClasses
		)
}

rule OWLClassOfClassOfInformationRepresentation2DslClass{
 	from
		owl_classOfClassOfInformationRepresentation: MM!ClassExpression(
			owl_classOfClassOfInformationRepresentation.isClassOfClassOfInformationRepresentation
		)
	to 
		dsl_classClassOfClassOfInformationRepresentation: MM1!Class(
			subClassOf <- owl_classOfClassOfInformationRepresentation.subClassOf
--			, disjointClasses <- owl_classOfClassOfInformationRepresentation.disjointClasses
		)
}

rule OWLClassOfClassOfRelationship2DslClass{
 	from
		owl_classOfClassOfRelationship: MM!ClassExpression(
			owl_classOfClassOfRelationship.isClassOfClassOfRelationship
		)
	to 
		dsl_classClassOfClassOfRelationship: MM1!Class(
			subClassOf <- owl_classOfClassOfRelationship.subClassOf
		)
}

rule OWLClassOfClassOfRelationshipWithSignature2DslClass{
 	from
		owl_classOfClassOfRelationshipWithSignature: MM!ClassExpression(
			owl_classOfClassOfRelationshipWithSignature.isClassOfClassOfRelationshipWithSignature
		)
	to 
		dsl_classClassOfClassOfRelationshipWithSignature: MM1!Class(
--			subClassOf <- owl_classOfClassOfRelationshipWithSignature.subClassOf
		)
}

rule OWLClassOfCompositeMaterial2DslClass{
 	from
		owl_classOfCompositeMaterial: MM!ClassExpression(
			owl_classOfCompositeMaterial.isClassOfCompositeMaterial
		)
	to 
		dsl_classClassOfCompositeMaterial: MM1!Class(
--			subClassOf <- owl_classOfCompositeMaterial.subClassOf
--			, disjointClasses <- owl_classOfCompositeMaterial.disjointClasses
		)
}

rule OWLClassOfCompound2DslClass{
 	from
		owl_classOfCompound: MM!ClassExpression(
			owl_classOfCompound.isClassOfCompound
		)
	to 
		dsl_classClassOfCompound: MM1!Class(
--			subClassOf <- owl_classOfCompound.debug('Ya!').subClassOf.debug('Yo!')
--			, disjointClasses <- owl_classOfCompound.disjointClasses
		)
}

rule OWLClassOfEvent2DslClass{
 	from
		owl_classOfEvent: MM!ClassExpression(
			owl_classOfEvent.isClassOfEvent
		)
	to 
		dsl_classClassOfEvent: MM1!Class(
			subClassOf <- owl_classOfEvent.subClassOf
			, disjointClasses <- owl_classOfEvent.disjointClasses
		)
}

rule OWLClassOfIndividual2DslClass{
 	from
		owl_classOfIndividual: MM!ClassExpression(
			owl_classOfIndividual.isClassOfIndividual
		)
	to 
		dsl_classClassOfAbstractObject: MM1!Class(
			subClassOf <- owl_classOfIndividual.subClassOf
		)
}

rule OWLClassOfIndividualUsedInConnection2DslClass{
 	from
		owl_classOfIndividualUsedInConnection: MM!ClassExpression(
			owl_classOfIndividualUsedInConnection.isClassOfIndividualUsedInConnection
		)
	to 
		dsl_classClassOfIndividualUsedInConnection: MM1!Class(
			subClassOf <- owl_classOfIndividualUsedInConnection.subClassOf
		)
}

rule OWLClassOfExpressInformationRepresentation2DslClass{
 	from
		owl_classOfExpressInformationRepresentation: MM!ClassExpression(
			owl_classOfExpressInformationRepresentation.isClassOfExpressInformationRepresentation
		)
	to 
		dsl_classClassOfExpressInformationRepresentation: MM1!Class(
			subClassOf <- owl_classOfExpressInformationRepresentation.subClassOf
			, disjoinClasses <-  owl_classOfExpressInformationRepresentation.disjointClasses
		)
}

rule OWLClassOfFeature2DslClass{
 	from
		owl_classOfFeature: MM!ClassExpression(
			owl_classOfFeature.isClassOfFeature
		)
	to 
		dsl_classClassOfFeature: MM1!Class(
--			subClassOf <- owl_classOfFeature.subClassOf
		)
}

rule OWLClassOfFeatureWholePart2DslClass{
 	from
		owl_classOfFeatureWholePart: MM!ClassExpression(
			owl_classOfFeatureWholePart.isClassOfFeatureWholePart
		)
	to 
		dsl_classClassOfFeatureWholePart: MM1!Class(
--			subClassOf <- owl_classOfFeatureWholePart.subClassOf
		)
}

rule OWLClassOfNumber2DslClass{
 	from
		owl_classOfNumber: MM!ClassExpression(
			owl_classOfNumber.isClassOfNumber
		)
	to 
		dsl_classClassOfNumber: MM1!Class(
			subClassOf <- owl_classOfNumber.subClassOf
			,  disjointClasses <- owl_classOfNumber.disjointClasses
		)
}

rule OWLClassOfPeriodInTime2DslClass{
 	from
		owl_classOfPeriodInTime: MM!ClassExpression(
			owl_classOfPeriodInTime.isClassOfPeriodInTime
		)
	to 
		dsl_classClassOfPeriodInTime: MM1!Class(
			subClassOf <- owl_classOfPeriodInTime.subClassOf
			, disjointClasses <- owl_classOfPeriodInTime.disjointClasses
		)
}

rule OWLClassOfPropertySpace2DslClass{
 	from
		owl_classOfPropertySpace: MM!ClassExpression(
			owl_classOfPropertySpace.isClassOfPropertySpace
		)
	to 
		dsl_classClassOfPropertySpace: MM1!Class(
			subClassOf <- owl_classOfPropertySpace.subClassOf
			,  disjointClasses <- owl_classOfPropertySpace.disjointClasses
		)
}

rule OWLClassOfRelationship2DslClass{
 	from
		owl_classOfRelationship: MM!ClassExpression(
			owl_classOfRelationship.isClassOfRelationship
		)
	to 
		dsl_classClassOfRelationship: MM1!Class(
			subClassOf <- owl_classOfRelationship.subClassOf	
		)
}

rule OWLClassOfShapeDimension2DslClass{
 	from
		owl_classOfShapeDimension: MM!ClassExpression(
			owl_classOfShapeDimension.isClassOfShapeDimension
		)
	to 
		dsl_classClassOfShapeDimension: MM1!Class(
			subClassOf <- owl_classOfShapeDimension.subClassOf
		)
}

rule OWLEnumeratedSetOfClass2DslClass{
 	from
		owl_enumeratedSetOfClass: MM!ClassExpression(
			owl_enumeratedSetOfClass.isEnumeratedSetOfClass
		)
	to 
		dsl_classEnumeratedSetOfClass: MM1!Class(
			subClassOf <- owl_enumeratedSetOfClass.subClassOf
		)
}

rule OWLEvent2DslIndividual{
	from
		owl_event:MM!ClassExpression(
			owl_event.isEvent 
		)
	to 
		dsl_individualEvent: MM1!Individual
}
rule OWLFunctionalPhysicalObject2DslIndividual{
 	from
		owl_functionalPhysicalObject: MM!ClassExpression(
			owl_functionalPhysicalObject.isFunctionalPhysicalObject
		)
	to 
		dsl_individualFunctionalPhysicalObject: MM1!Individual
}

rule OWLIndividualDimension2DslClass{
 	from
		owl_individualDimension: MM!ClassExpression(
			owl_individualDimension.isIndividualDimension
		)
	to 
		dsl_classIndividualDimension: MM1!Class(
			subClassOf <- owl_individualDimension.subClassOf
			, disjointClasses <- owl_individualDimension.disjointClasses
		)
}

rule OWLMaterializedPhysicalObject2DslIndividual{
 	from
		owl_materializedPhysicalObject: MM!ClassExpression(
			owl_materializedPhysicalObject.isMaterializedPhysicalObject
		)
	to 
		dsl_individualMaterializedPhysicalObject: MM1!Individual
}

rule OWLParticipatingRoleAndDomain2DslClass{
 	from
		owl_participatingRoleAndDomain: MM!ClassExpression(
			owl_participatingRoleAndDomain.isParticipatingRoleAndDomain
		)
	to 
		dsl_classParticipatingRoleAndDomain: MM1!Class(
			subClassOf <- owl_participatingRoleAndDomain.subClassOf
		)
}

 rule OWLPeriodInTime2DslIndividual{
 	from
		owl_periodInTime: MM!ClassExpression(
			owl_periodInTime.isPeriodInTime
		)
	to 
		dsl_individualPeriofInTime: MM1!Individual
 }
 
 rule OWLPhysicalObject2DslIndividual{
 	from
		owl_physicalObject: MM!ClassExpression(
			owl_physicalObject.isPhysicalObject	
		)
	to 
		dsl_individualPhysicalObject: MM1!Individual
 }
 
rule OWLPointInTime2DslIndividual{
 	from
		owl_pointInTime: MM!ClassExpression(
			owl_pointInTime.isPointInTime
		)
	to 
		dsl_individualPointInTime: MM1!Individual
}

rule OWLProperty2DslClass{
 	from
		owl_property: MM!ClassExpression(
			owl_property.isProperty
		)
	to 
		dsl_classProperty: MM1!Class(
			subClassOf <- owl_property.subClassOf
			, disjointClasses <- owl_property.disjointClasses
		)
}

rule OWLPropertySpace2DslClass{
	from
		owl_propertySpace: MM!ClassExpression(
			owl_propertySpace.isPropertySpace
		)
	to
		dsl_classPropertySpace: MM1!Class(
--			subClassOf <- owl_propertySpace.subClassOf	
		)			
}

rule OWLRole2DslClass{
 	from
		owl_role: MM!ClassExpression(
			owl_role.isRole
		)
	to 
		dsl_classRole: MM1!Class(
			subClassOf <- owl_role.subClassOf
		)
}

rule OWLRoleAndDomain2DslClass{
 	from
		owl_roleAndDomain: MM!ClassExpression(
			owl_roleAndDomain.isRoleAndDomain
		)
	to 
		dsl_classRoleAndDomain: MM1!Class(
			subClassOf <- owl_roleAndDomain.subClassOf
		)
}

rule OWLSpatialLocation2DslIndividual{
 	from
		owl_spatialLocation: MM!ClassExpression(
			owl_spatialLocation.isSpatialLocation
		)
	to 
		dsl_individualSpatialLocation: MM1!Individual
}

rule OWLStatus2DslClass{
 	from
		owl_status: MM!ClassExpression(
			owl_status.isStatus
		)
	to 
		dsl_classStatus: MM1!Class(
			subClassOf <- owl_status.subClassOf
		)
}

rule OWLStream2DslIndividual{
 	from
		owl_stream: MM!ClassExpression(
			owl_stream.isStream
		)
	to 
		dsl_individualStream: MM1!Individual
}

rule OWLWholeLifeIndividual2DslIndividual{
 	from
		owl_wholeLifeIndividual: MM!ClassExpression(
			owl_wholeLifeIndividual.isWholeLifeIndividual
		)
	to 
		dsl_individualWholeLifeIndividual: MM1!Individual
 }


--///////////////////////////////////
--Templates
--//////////////////////////////////

rule OWLApproval2DslTemplate{
 	from
		owl_approval: MM!OWLClass(
			owl_approval.isApproval
		)
	to
		dsl_roleApprover: MM1!TemplateRole(
--			entityType <- dsl_roleApprover.isPossibleIndividual
		)
		, dsl_roleApproved: MM1!TemplateRole(
--			entityType <- dsl_roleApproved.isRelationship	
		)
		, dsl_templateApproval: MM1!Template(
--		subClassOf <- owl_approval.subClassOf
		 roles <- Sequence {dsl_roleApprover, dsl_roleApproved}
		)
		
}

rule OWLArrangementOfIndividual2DslTemplate{
 	from
		owl_arrangementOfIndividual: MM!OWLClass(
			owl_arrangementOfIndividual.isArrangementOfIndividual
		)
	to 
		dsl_roleWhole:MM1!TemplateRole(
--			entityType <- dsl_roleWhole.isArrangedIndividual	
		)
		, dsl_templateArrangementOfIndividual: MM1!Template(
--			roles <- dsl_roleWhole
--			, subClassOf <- owl_arrangementOfIndividual.subClassOf
		)
}

rule OWLAssemblyOfIndividual2DslTemplate{
 	from
		owl_assemblyOfIndividual: MM!OWLClass(
			owl_assemblyOfIndividual.isAssemblyOfIndividual
		)
	to 
		 dsl_templateArrangementOfIndividual: MM1!Template(
--			subClassOf <- owl_assemblyOfIndividual.subClassOf
		)
}
  
rule OWLBeginning2DslTemplate{
 	from
		owl_beginning: MM!OWLClass(
			owl_beginning.isBeginning
		)
	to 
		 dsl_templateBeginning: MM1!Template(
--			subClassOf <- owl_beginning.subClassOf
		)
}

rule OWLBoundaryOfNumberSpace2DslTemplate{
 	from
		owl_boundaryOfNumberSpace: MM!OWLClass(
			owl_boundaryOfNumberSpace.isBoundaryOfNumberSpace
		)
	to 
		dsl_roleSubclass: MM1!TemplateRole(
--			entityType <- dsl_roleSubclass.isNumberSpace	
		)
		, dsl_roleSuperclass: MM1!TemplateRole(
--			entityType <- dsl_roleSuperclass.isNumberSpace	
		)
		 , dsl_templateBoundaryOfNumberSpace: MM1!Template(
--			subClassOf <- owl_boundaryOfNumberSpace.subClassOf
--			, roles <- Sequence {dsl_roleSubclass, dsl_roleSuperclass}
		)
}

rule OWLCauseOfEvent2DslTemplate{
 	from
		owl_causeOfEvent: MM!OWLClass(
			owl_causeOfEvent.isCauseOfEvent
		)
	to 
		dsl_roleCaused: MM1!TemplateRole(
--			entityType <- dsl_roleCaused.isEvent
		)
		, dsl_roleCauser: MM1!TemplateRole(
--			entityType <- dsl_roleCauser.isActivity	
		)
		 , dsl_templateCauseOfEvent: MM1!Template(
--			subClassOf <- owl_causeOfEvent.subClassOf
--			, roles <- Sequence {dsl_roleCaused, dsl_roleCauser}
		)
}

rule OWLClassOfApproval2DslTemplate{
 	from
		owl_classOfApproval: MM!OWLClass(
			owl_classOfApproval.isClassOfApproval
		)
	to 
		dsl_roleClassOfApproved: MM1!TemplateRole(
			entityType <- thisModule.isClassOfRelationship
		)
		, dsl_roleClassOfApprover: MM1!TemplateRole(
			entityType <- thisModule.isClassOfIndividual
		)
		, dsl_templateClassOfApproval: MM1!Template(
			subClassOf <- owl_classOfApproval.subClassOf
			, roles <- Sequence {dsl_roleClassOfApproved, dsl_roleClassOfApprover}
		)
}

rule OWLClassOfApprovalByStatus2DslTemplate{
 	from
		owl_classOfApprovalByStatus: MM!OWLClass(
			owl_classOfApprovalByStatus.isClassOfApprovalByStatus
		)
	to 
		dsl_roleClassOfApprovedByStatus: MM1!TemplateRole(
			entityType <- thisModule.isClassOfRelationship
		)
		, dsl_roleClassOfApproverByStatus: MM1!TemplateRole(
			entityType <- thisModule.isClassOfIndividual
		)
		, dsl_templateClassOfApprovalByStatus: MM1!Template(
			subClassOf <- owl_classOfApprovalByStatus.subClassOf
			, roles <- Sequence {dsl_roleClassOfApprovedByStatus, dsl_roleClassOfApproverByStatus}
		)
}

rule OWLClassOfArrangementOfIndividual{
	from
		owl_classOfArrangementOfIndividual: MM!OWLClass(
			owl_classOfArrangementOfIndividual.isClassOfArrangementOfIndividual	
		)
	to
		dsl_roleClassOfWhole: MM1!TemplateRole(
			entityType <- thisModule.isClassOfArrangementIndividual
		)
		, dsl_templateClassOfArrangementOfIndividual: MM1!Template(
			subClassOf <- owl_classOfArrangementOfIndividual.subClassOf
			, roles <- dsl_roleClassOfWhole 
		)
}

rule OWLClassOfAssemblyOfIndividual2DslTemplate{
	from
		owl_classOfAssemblyOfIndividual: MM!OWLClass(
			owl_classOfAssemblyOfIndividual.isClassOfAssemblyOfIndividual	
		)
	to
		dsl_roleClassOfWhole: MM1!TemplateRole(
			entityType <- thisModule.isClassOfArrangementIndividual
		)
		, dsl_templateClassOfArrangementOfIndividual: MM1!Template(
			subClassOf <- owl_classOfAssemblyOfIndividual.subClassOf
			, roles <- dsl_roleClassOfWhole 
		)
}

rule OWLClassOfAssertion2DslTemplate{
 	from
		owl_classOfAssertion: MM!OWLClass(
			owl_classOfAssertion.isClassOfAssertion
		)
	to 
		dsl_templateClassOfAssertion: MM1!Template(
			subClassOf <- owl_classOfAssertion.subClassOf
			--, roles <- 
		)
}

rule OWLClassOfCauseOfBeginningOfClassOfIndividual2DslTemplate{
 	from
		owl_classOfCauseOfBeginningOfClassOfIndividual: MM!OWLClass(
			owl_classOfCauseOfBeginningOfClassOfIndividual.isClassOfCauseOfBeginningOfClassOfIndividual
		)
	to 
		dsl_roleClassOfBegun: MM1!TemplateRole(
			entityType <- thisModule.isClassOfIndividual
		)
		, dsl_roleClassOfCauser: MM1!TemplateRole(
			entityType <- thisModule.isClassOfActivity 	
		)
		, dsl_templateClassOfAssertion: MM1!Template(
			subClassOf <- owl_classOfCauseOfBeginningOfClassOfIndividual.subClassOf
			, roles <- Sequence {dsl_roleClassOfBegun, dsl_roleClassOfCauser}
		)
}

rule OWLClassOfCauseOfEndingOfClassOfIndividual2DslTemplate{
 	from
		owl_classOfCauseOfEndingOfClassOfIndividual: MM!OWLClass(
			owl_classOfCauseOfEndingOfClassOfIndividual.isClassOfCauseOfEndingOfClassOfIndividual
		)
	to 
		dsl_roleClassOfCauser: MM1!TemplateRole(
			entityType <- thisModule.isClassOfActivity 	
		)
		,dsl_roleClassOfEnded: MM1!TemplateRole(
			entityType <- thisModule.isClassOfIndividual
		)
		, dsl_templateClassOfAssertion: MM1!Template(
			subClassOf <- owl_classOfCauseOfEndingOfClassOfIndividual.subClassOf
			, roles <- Sequence { dsl_roleClassOfCauser, dsl_roleClassOfEnded}
		)
}

rule OWLClassOfClassOfComposition2DslTemplate{
	from
		owl_classOfClassOfComposition: MM!OWLClass(
			owl_classOfClassOfComposition.isClassOfClassOfComposition	
		)
	to 
		dsl_roleClassOfClassOfPart: MM1!TemplateRole(
			entityType <- thisModule.isClassOfClassOfIndividual	
		)
		,dsl_roleClassOfClassOfWhole: MM1!TemplateRole(
			entityType <- thisModule.isClassOfClassOfIndividual	
		)
		,dsl_templateClassOfClassOfComposition: MM1!Template(
			subClassOf <- owl_classOfClassOfComposition.subClassOf
			,roles <- Sequence {dsl_roleClassOfClassOfPart, dsl_roleClassOfClassOfWhole}
		)
}

rule OWLClassOfClassOfDefinition2DslTemplate{
	from
		owl_classOfClassOfDefinition: MM!OWLClass(
			owl_classOfClassOfDefinition.isClassOfClassOfDefinition	
		)
	to 
		dsl_roleClassOfPattern: MM1!TemplateRole(
			entityType <- thisModule.isClassOfDefinition
		)
		,dsl_roleClassOfRepresented: MM1!TemplateRole(
			entityType <- thisModule.isClassOfDefinition
		)
		,dsl_templateClassOfClassOfDefinition: MM1!Template(
			subClassOf <- owl_classOfClassOfDefinition.subClassOf
			,roles <- Sequence {dsl_roleClassOfPattern, dsl_roleClassOfRepresented}
		)
}

rule OWLClassOfClassOfDescription2DslTemplate{
	from
		owl_classOfClassOfDescription: MM!OWLClass(
			owl_classOfClassOfDescription.isClassOfClassOfDescription	
		)
	to 
		dsl_roleClassOfPattern: MM1!TemplateRole(
			entityType <- thisModule.isClassOfDescription	
		)
		,dsl_roleClassOfRepresented: MM1!TemplateRole(
			entityType <- thisModule.isClassOfDescription	
		)
		,dsl_templateClassOfClassOfDescription: MM1!Template(
			subClassOf <- owl_classOfClassOfDescription.subClassOf
			,roles <- Sequence {dsl_roleClassOfPattern, dsl_roleClassOfRepresented}
		)
}

rule OWLClassOfClassOfIdentification2DslTemplate{
	from
		owl_classOfClassOfIdentification: MM!OWLClass(
			owl_classOfClassOfIdentification.isClassOfClassOfIdentification	
		)
	to 
		dsl_roleClassOfPattern: MM1!TemplateRole(
			entityType <- thisModule.isClassOfIdentification
		)
		,dsl_roleClassOfRepresented: MM1!TemplateRole(
			entityType <- thisModule.isClassOfIdentification	
		)
		,dsl_templateClassOfClassOfIdentification: MM1!Template(
			subClassOf <- owl_classOfClassOfIdentification.subClassOf
			,roles <- Sequence {dsl_roleClassOfPattern, dsl_roleClassOfRepresented}
		)
}

rule OWLClassOfClassOfRepresentation2DslTemplate{
	from
		owl_classOfClassOfRepresentation: MM!OWLClass(
			owl_classOfClassOfRepresentation.isClassOfClassOfRepresentation	
		)
	to 
		dsl_roleClassOfPattern: MM1!TemplateRole(
			entityType <- thisModule.isClassOfClassOfInformationRepresentation
		)
		,dsl_roleClassOfRepresented: MM1!TemplateRole(
			entityType <- thisModule.isClass
		)
		,dsl_templateClassOfClassOfRepresentation: MM1!Template(
			subClassOf <- owl_classOfClassOfRepresentation.subClassOf
			,roles <- Sequence {dsl_roleClassOfPattern, dsl_roleClassOfRepresented}
		)
}

rule OWLClassOfClassOfRepresentationTranslation2DslTemplate{
	from
		owl_classOfClassOfRepresentationTranslation: MM!OWLClass(
			owl_classOfClassOfRepresentationTranslation.isClassOfClassOfRepresentationTranslation	
		)
	to 
		dsl_roleClassOfFirst: MM1!TemplateRole(
			entityType <- thisModule.isClassOfClassOfInformationRepresentation
		)
		,dsl_roleClassOfSecond: MM1!TemplateRole(
			entityType <- thisModule.isClassOfClassOfInformationRepresentation
		)
		,dsl_templateClassOfClassOfRepresentationTranslation: MM1!Template(
			subClassOf <- owl_classOfClassOfRepresentationTranslation.subClassOf
			,roles <- Sequence {dsl_roleClassOfFirst, dsl_roleClassOfSecond}
		)
}

rule OWLClassOfClassOfResponsibilityForRepresentation2DslTemplate{
	from
		owl_classOfClassOfResponsibilityForRepresentation: MM!OWLClass(
			owl_classOfClassOfResponsibilityForRepresentation.isClassOfClassOfResponsibilityForRepresentation	
		)
	to 
		dsl_roleClassOfClassOfControlled: MM1!TemplateRole(
			entityType <- thisModule.isClassOfClassOfRepresentation
		)
		,dsl_roleController: MM1!TemplateRole(
			entityType <- thisModule.isPossibleIndividual
		)
		,dsl_templateClassOfClassOfResponsibilityForRepresentation: MM1!Template(
			subClassOf <- owl_classOfClassOfResponsibilityForRepresentation.subClassOf
			,roles <- Sequence {dsl_roleClassOfClassOfControlled, dsl_roleController}
		)
}

rule OWLClassOfClassOfUsageOfRepresentation2DslTemplate{
	from
		owl_classOfClassOfUsageOfRepresentation: MM!OWLClass(
			owl_classOfClassOfUsageOfRepresentation.isClassOfClassOfUsageOfRepresentation
		)
	to 
		dsl_roleClassOfClassOfUsed: MM1!TemplateRole(
			entityType <- thisModule.isClassOfClassOfRepresentation
		)
		,dsl_roleUser: MM1!TemplateRole(
			entityType <- thisModule.isPossibleIndividual
		)
		,dsl_templateClassOfClassOfUsageOfRepresentation: MM1!Template(
			subClassOf <- owl_classOfClassOfUsageOfRepresentation.subClassOf
			,roles <- Sequence {dsl_roleClassOfClassOfUsed, dsl_roleUser}
		)
}

rule OWLClassOfClassification2DslTemplate{
	from
		owl_classOfClassification: MM!OWLClass(
			owl_classOfClassification.isClassOfClassification
		)
	to 
		dsl_roleClassOfClassified: MM1!TemplateRole(
			entityType <- thisModule.isClass
		)
		,dsl_roleClassOfClassifier: MM1!TemplateRole(
			entityType <- thisModule.isClassOfClass
		)
		,dsl_templateClassOfClassification: MM1!Template(
			subClassOf <- owl_classOfClassification.subClassOf
			,roles <- Sequence {dsl_roleClassOfClassified, dsl_roleClassOfClassifier}
		)
}

rule OWLClassOfCompositionOfIndividual2DslTemplate{
	from
		owl_classOfCompositionOfIndividual: MM!OWLClass(
			owl_classOfCompositionOfIndividual.isClassOfCompositionOfIndividual
		)
	to 
		dsl_roleClassOfPart: MM1!TemplateRole(
			entityType <- thisModule.isClassOfIndividual
		)
		,dsl_roleClassOfWhole: MM1!TemplateRole(
			entityType <- thisModule.isClassOfIndividual
		)
		,dsl_templateClassOfCompositionOfIndividual: MM1!Template(
			subClassOf <- owl_classOfCompositionOfIndividual.subClassOf
			,roles <- Sequence {dsl_roleClassOfPart, dsl_roleClassOfWhole}
		)
}

rule OWLClassOfConnectionOfIndividual2DslTemplate{
	from
		owl_classOfConnectionOfIndividual: MM!OWLClass(
			owl_classOfConnectionOfIndividual.isClassOfConnectionOfIndividual
		)
	to 
		dsl_roleClassOfSide1: MM1!TemplateRole(
			entityType <- thisModule.isClassOfIndividual
		)
		,dsl_roleClassOfSide2: MM1!TemplateRole(
			entityType <- thisModule.isClassOfIndividual
		)
		,dsl_templateClassOfConnectionOfIndividual: MM1!Template(
			subClassOf <- owl_classOfConnectionOfIndividual.subClassOf
			,roles <- Sequence {dsl_roleClassOfSide1, dsl_roleClassOfSide2}
		)
}

rule OWLClassOfContainmentOfIndividual2DslTemplate{
 	from
		owl_classOfContainmentOfIndividual: MM!OWLClass(
			owl_classOfContainmentOfIndividual.isClassOfContainmentOfIndividual
		)
	to 
		dsl_templateClassOfContainmentOfIndividual: MM1!Template(
			subClassOf <- owl_classOfContainmentOfIndividual.subClassOf
		)
}

rule OWLClassOfDefinition2DslTemplate{
 	from
		owl_classOfDefinition: MM!OWLClass(
			owl_classOfDefinition.isClassOfDefinition
		)
	to 
		dsl_roleRepresented: MM1!TemplateRole(
			entityType <- thisModule.isClass	
		)
		,dsl_templateClassOfDefinition: MM1!Template(
			subClassOf <- owl_classOfDefinition.subClassOf
		)
}

rule OWLClassOfDescription2DslTemplate{
 	from
		owl_classOfDescription: MM!OWLClass(
			owl_classOfDescription.isClassOfDescription
		)
	to 
		dsl_templateClassOfDescription: MM1!Template(
			subClassOf <- owl_classOfDescription.subClassOf
		)
}

rule OWLClassOfDimensionForShape2DslTemplate{
 	from
		owl_classOfDimensionForShape: MM!OWLClass(
			owl_classOfDimensionForShape.isClassOfDimensionForShape
		)
	to 
		dsl_roleClassOfDimension: MM1!TemplateRole(
		entityType <- thisModule.isClassOfShapeDimension	
		)
		,dsl_roleClassOfShape: MM1!TemplateRole(
		entityType <- thisModule.isClassOfShape	
		)
		,dsl_templateClassOfDimensionForShape: MM1!Template(
			subClassOf <- owl_classOfDimensionForShape.subClassOf
			,roles <- Sequence {dsl_roleClassOfDimension, dsl_roleClassOfShape}
		)
}

rule OWLClassOfDirectConnection2DslTemplate{
 	from
		owl_classOfDirectConnection: MM!OWLClass(
			owl_classOfDirectConnection.isClassOfDirectConnection
		)
	to 
		dsl_templateClassOfDirectConnection: MM1!Template(
			subClassOf <- owl_classOfDirectConnection.subClassOf
		)
}

--rule OWLClassOfFunctionalMapping2DslTemplate{
-- 	from
--		owl_classOfFunctionalMapping: MM!OWLClass(
--			owl_classOfFunctionalMapping.isClassOfFunctionalMapping
--		)
--	to 
--		dsl_roleCodomain: MM1!TemplateRole(
--			entityType <- 	
--		)
--		,dsl_templateClassOfFunctionalMapping: MM1!Template(
--			subClassOf <- owl_classOfFunctionalMapping.subClassOf
--		)
--}